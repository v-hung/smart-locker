/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LockerInsertInput
 */
export interface LockerInsertInput {
    /**
     * 
     * @type {number}
     * @memberof LockerInsertInput
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    lockerCode: string;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    area?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    size?: LockerInsertInputSizeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    type?: LockerInsertInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    lockType?: LockerInsertInputLockTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    status?: LockerInsertInputStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerInsertInput
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof LockerInsertInput
     */
    userId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LockerInsertInput
     */
    branchId?: number | null;
}


/**
 * @export
 */
export const LockerInsertInputSizeEnum = {
    S: 's',
    M: 'm',
    L: 'l',
    Xl: 'xl'
} as const;
export type LockerInsertInputSizeEnum = typeof LockerInsertInputSizeEnum[keyof typeof LockerInsertInputSizeEnum];

/**
 * @export
 */
export const LockerInsertInputTypeEnum = {
    Standard: 'standard',
    Smart: 'smart'
} as const;
export type LockerInsertInputTypeEnum = typeof LockerInsertInputTypeEnum[keyof typeof LockerInsertInputTypeEnum];

/**
 * @export
 */
export const LockerInsertInputLockTypeEnum = {
    Key: 'key',
    Card: 'card',
    Pin: 'pin',
    Biometric: 'biometric'
} as const;
export type LockerInsertInputLockTypeEnum = typeof LockerInsertInputLockTypeEnum[keyof typeof LockerInsertInputLockTypeEnum];

/**
 * @export
 */
export const LockerInsertInputStatusEnum = {
    Available: 'available',
    InUse: 'in_use',
    Maintenance: 'maintenance',
    Broken: 'broken'
} as const;
export type LockerInsertInputStatusEnum = typeof LockerInsertInputStatusEnum[keyof typeof LockerInsertInputStatusEnum];


/**
 * Check if a given object implements the LockerInsertInput interface.
 */
export function instanceOfLockerInsertInput(value: object): value is LockerInsertInput {
    if (!('lockerCode' in value) || value['lockerCode'] === undefined) return false;
    return true;
}

export function LockerInsertInputFromJSON(json: any): LockerInsertInput {
    return LockerInsertInputFromJSONTyped(json, false);
}

export function LockerInsertInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): LockerInsertInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'lockerCode': json['lockerCode'],
        'area': json['area'] == null ? undefined : json['area'],
        'size': json['size'] == null ? undefined : json['size'],
        'type': json['type'] == null ? undefined : json['type'],
        'lockType': json['lockType'] == null ? undefined : json['lockType'],
        'status': json['status'] == null ? undefined : json['status'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'branchId': json['branchId'] == null ? undefined : json['branchId'],
    };
}

export function LockerInsertInputToJSON(json: any): LockerInsertInput {
    return LockerInsertInputToJSONTyped(json, false);
}

export function LockerInsertInputToJSONTyped(value?: LockerInsertInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'lockerCode': value['lockerCode'],
        'area': value['area'],
        'size': value['size'],
        'type': value['type'],
        'lockType': value['lockType'],
        'status': value['status'],
        'createdAt': value['createdAt'],
        'userId': value['userId'],
        'branchId': value['branchId'],
    };
}

