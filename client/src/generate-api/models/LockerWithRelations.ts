/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface LockerWithRelations
 */
export interface LockerWithRelations {
    /**
     * 
     * @type {number}
     * @memberof LockerWithRelations
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelations
     */
    lockerCode: string;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelations
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelations
     */
    status: LockerWithRelationsStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelations
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof LockerWithRelations
     */
    userId: number | null;
    /**
     * 
     * @type {User}
     * @memberof LockerWithRelations
     */
    user: User | null;
}


/**
 * @export
 */
export const LockerWithRelationsStatusEnum = {
    Available: 'available',
    InUse: 'in_use',
    Maintenance: 'maintenance'
} as const;
export type LockerWithRelationsStatusEnum = typeof LockerWithRelationsStatusEnum[keyof typeof LockerWithRelationsStatusEnum];


/**
 * Check if a given object implements the LockerWithRelations interface.
 */
export function instanceOfLockerWithRelations(value: object): value is LockerWithRelations {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lockerCode' in value) || value['lockerCode'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function LockerWithRelationsFromJSON(json: any): LockerWithRelations {
    return LockerWithRelationsFromJSONTyped(json, false);
}

export function LockerWithRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LockerWithRelations {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'lockerCode': json['lockerCode'],
        'location': json['location'],
        'status': json['status'],
        'createdAt': json['createdAt'],
        'userId': json['userId'],
        'user': UserFromJSON(json['user']),
    };
}

export function LockerWithRelationsToJSON(json: any): LockerWithRelations {
    return LockerWithRelationsToJSONTyped(json, false);
}

export function LockerWithRelationsToJSONTyped(value?: LockerWithRelations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'lockerCode': value['lockerCode'],
        'location': value['location'],
        'status': value['status'],
        'createdAt': value['createdAt'],
        'userId': value['userId'],
        'user': UserToJSON(value['user']),
    };
}

