/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserInput } from './UserInput';
import {
    UserInputFromJSON,
    UserInputFromJSONTyped,
    UserInputToJSON,
    UserInputToJSONTyped,
} from './UserInput';
import type { BranchInput } from './BranchInput';
import {
    BranchInputFromJSON,
    BranchInputFromJSONTyped,
    BranchInputToJSON,
    BranchInputToJSONTyped,
} from './BranchInput';

/**
 * 
 * @export
 * @interface LockerWithRelationsInput
 */
export interface LockerWithRelationsInput {
    /**
     * 
     * @type {number}
     * @memberof LockerWithRelationsInput
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    lockerCode: string;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    area: string | null;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    size: LockerWithRelationsInputSizeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    type: LockerWithRelationsInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    lockType: LockerWithRelationsInputLockTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    status: LockerWithRelationsInputStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerWithRelationsInput
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof LockerWithRelationsInput
     */
    userId: number | null;
    /**
     * 
     * @type {number}
     * @memberof LockerWithRelationsInput
     */
    branchId: number | null;
    /**
     * 
     * @type {UserInput}
     * @memberof LockerWithRelationsInput
     */
    user: UserInput | null;
    /**
     * 
     * @type {BranchInput}
     * @memberof LockerWithRelationsInput
     */
    branch: BranchInput | null;
}


/**
 * @export
 */
export const LockerWithRelationsInputSizeEnum = {
    S: 's',
    M: 'm',
    L: 'l',
    Xl: 'xl'
} as const;
export type LockerWithRelationsInputSizeEnum = typeof LockerWithRelationsInputSizeEnum[keyof typeof LockerWithRelationsInputSizeEnum];

/**
 * @export
 */
export const LockerWithRelationsInputTypeEnum = {
    Standard: 'standard',
    Smart: 'smart'
} as const;
export type LockerWithRelationsInputTypeEnum = typeof LockerWithRelationsInputTypeEnum[keyof typeof LockerWithRelationsInputTypeEnum];

/**
 * @export
 */
export const LockerWithRelationsInputLockTypeEnum = {
    Key: 'key',
    Card: 'card',
    Pin: 'pin',
    Biometric: 'biometric'
} as const;
export type LockerWithRelationsInputLockTypeEnum = typeof LockerWithRelationsInputLockTypeEnum[keyof typeof LockerWithRelationsInputLockTypeEnum];

/**
 * @export
 */
export const LockerWithRelationsInputStatusEnum = {
    Available: 'available',
    InUse: 'in_use',
    Maintenance: 'maintenance',
    Broken: 'broken'
} as const;
export type LockerWithRelationsInputStatusEnum = typeof LockerWithRelationsInputStatusEnum[keyof typeof LockerWithRelationsInputStatusEnum];


/**
 * Check if a given object implements the LockerWithRelationsInput interface.
 */
export function instanceOfLockerWithRelationsInput(value: object): value is LockerWithRelationsInput {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lockerCode' in value) || value['lockerCode'] === undefined) return false;
    if (!('area' in value) || value['area'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('lockType' in value) || value['lockType'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('branchId' in value) || value['branchId'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('branch' in value) || value['branch'] === undefined) return false;
    return true;
}

export function LockerWithRelationsInputFromJSON(json: any): LockerWithRelationsInput {
    return LockerWithRelationsInputFromJSONTyped(json, false);
}

export function LockerWithRelationsInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): LockerWithRelationsInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'lockerCode': json['lockerCode'],
        'area': json['area'],
        'size': json['size'],
        'type': json['type'],
        'lockType': json['lockType'],
        'status': json['status'],
        'createdAt': json['createdAt'],
        'userId': json['userId'],
        'branchId': json['branchId'],
        'user': UserInputFromJSON(json['user']),
        'branch': BranchInputFromJSON(json['branch']),
    };
}

export function LockerWithRelationsInputToJSON(json: any): LockerWithRelationsInput {
    return LockerWithRelationsInputToJSONTyped(json, false);
}

export function LockerWithRelationsInputToJSONTyped(value?: LockerWithRelationsInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'lockerCode': value['lockerCode'],
        'area': value['area'],
        'size': value['size'],
        'type': value['type'],
        'lockType': value['lockType'],
        'status': value['status'],
        'createdAt': value['createdAt'],
        'userId': value['userId'],
        'branchId': value['branchId'],
        'user': UserInputToJSON(value['user']),
        'branch': BranchInputToJSON(value['branch']),
    };
}

