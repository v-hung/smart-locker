/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Locker } from './Locker';
import {
    LockerFromJSON,
    LockerFromJSONTyped,
    LockerToJSON,
    LockerToJSONTyped,
} from './Locker';

/**
 * 
 * @export
 * @interface UserWithRelations
 */
export interface UserWithRelations {
    /**
     * 
     * @type {number}
     * @memberof UserWithRelations
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    fullName: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    role: UserWithRelationsRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserWithRelations
     */
    createdAt: string;
    /**
     * 
     * @type {Locker}
     * @memberof UserWithRelations
     */
    locker: Locker | null;
}


/**
 * @export
 */
export const UserWithRelationsRoleEnum = {
    Guest: 'guest',
    User: 'user',
    Admin: 'admin'
} as const;
export type UserWithRelationsRoleEnum = typeof UserWithRelationsRoleEnum[keyof typeof UserWithRelationsRoleEnum];


/**
 * Check if a given object implements the UserWithRelations interface.
 */
export function instanceOfUserWithRelations(value: object): value is UserWithRelations {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('locker' in value) || value['locker'] === undefined) return false;
    return true;
}

export function UserWithRelationsFromJSON(json: any): UserWithRelations {
    return UserWithRelationsFromJSONTyped(json, false);
}

export function UserWithRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithRelations {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'fullName': json['fullName'],
        'email': json['email'],
        'role': json['role'],
        'createdAt': json['createdAt'],
        'locker': LockerFromJSON(json['locker']),
    };
}

export function UserWithRelationsToJSON(json: any): UserWithRelations {
    return UserWithRelationsToJSONTyped(json, false);
}

export function UserWithRelationsToJSONTyped(value?: UserWithRelations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'fullName': value['fullName'],
        'email': value['email'],
        'role': value['role'],
        'createdAt': value['createdAt'],
        'locker': LockerToJSON(value['locker']),
    };
}

