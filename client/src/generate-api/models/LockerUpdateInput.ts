/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LockerUpdateInput
 */
export interface LockerUpdateInput {
    /**
     * 
     * @type {number}
     * @memberof LockerUpdateInput
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    lockerCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    area?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    size?: LockerUpdateInputSizeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    type?: LockerUpdateInputTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    lockType?: LockerUpdateInputLockTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    status?: LockerUpdateInputStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof LockerUpdateInput
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof LockerUpdateInput
     */
    userId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LockerUpdateInput
     */
    branchId?: number | null;
}


/**
 * @export
 */
export const LockerUpdateInputSizeEnum = {
    S: 's',
    M: 'm',
    L: 'l',
    Xl: 'xl'
} as const;
export type LockerUpdateInputSizeEnum = typeof LockerUpdateInputSizeEnum[keyof typeof LockerUpdateInputSizeEnum];

/**
 * @export
 */
export const LockerUpdateInputTypeEnum = {
    Standard: 'standard',
    Smart: 'smart'
} as const;
export type LockerUpdateInputTypeEnum = typeof LockerUpdateInputTypeEnum[keyof typeof LockerUpdateInputTypeEnum];

/**
 * @export
 */
export const LockerUpdateInputLockTypeEnum = {
    Key: 'key',
    Card: 'card',
    Pin: 'pin',
    Biometric: 'biometric'
} as const;
export type LockerUpdateInputLockTypeEnum = typeof LockerUpdateInputLockTypeEnum[keyof typeof LockerUpdateInputLockTypeEnum];

/**
 * @export
 */
export const LockerUpdateInputStatusEnum = {
    Available: 'available',
    InUse: 'in_use',
    Maintenance: 'maintenance',
    Broken: 'broken'
} as const;
export type LockerUpdateInputStatusEnum = typeof LockerUpdateInputStatusEnum[keyof typeof LockerUpdateInputStatusEnum];


/**
 * Check if a given object implements the LockerUpdateInput interface.
 */
export function instanceOfLockerUpdateInput(value: object): value is LockerUpdateInput {
    return true;
}

export function LockerUpdateInputFromJSON(json: any): LockerUpdateInput {
    return LockerUpdateInputFromJSONTyped(json, false);
}

export function LockerUpdateInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): LockerUpdateInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'lockerCode': json['lockerCode'] == null ? undefined : json['lockerCode'],
        'area': json['area'] == null ? undefined : json['area'],
        'size': json['size'] == null ? undefined : json['size'],
        'type': json['type'] == null ? undefined : json['type'],
        'lockType': json['lockType'] == null ? undefined : json['lockType'],
        'status': json['status'] == null ? undefined : json['status'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'branchId': json['branchId'] == null ? undefined : json['branchId'],
    };
}

export function LockerUpdateInputToJSON(json: any): LockerUpdateInput {
    return LockerUpdateInputToJSONTyped(json, false);
}

export function LockerUpdateInputToJSONTyped(value?: LockerUpdateInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'lockerCode': value['lockerCode'],
        'area': value['area'],
        'size': value['size'],
        'type': value['type'],
        'lockType': value['lockType'],
        'status': value['status'],
        'createdAt': value['createdAt'],
        'userId': value['userId'],
        'branchId': value['branchId'],
    };
}

