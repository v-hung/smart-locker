/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Locker,
  LockerInsertInput,
  LockerUpdateInput,
} from '../models/index';
import {
    LockerFromJSON,
    LockerToJSON,
    LockerInsertInputFromJSON,
    LockerInsertInputToJSON,
    LockerUpdateInputFromJSON,
    LockerUpdateInputToJSON,
} from '../models/index';

export interface ApiLockersLockersIdDeleteRequest {
    id: string;
}

export interface ApiLockersLockersIdGetRequest {
    id: string;
}

export interface ApiLockersLockersIdPutRequest {
    id: string;
    lockerUpdateInput?: LockerUpdateInput;
}

export interface ApiLockersLockersPostRequest {
    lockerInsertInput?: LockerInsertInput;
}

/**
 * 
 */
export class LockerApi extends runtime.BaseAPI {

    /**
     */
    async apiLockersLockersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Locker>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/lockers/lockers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LockerFromJSON));
    }

    /**
     */
    async apiLockersLockersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Locker>> {
        const response = await this.apiLockersLockersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLockersLockersIdDeleteRaw(requestParameters: ApiLockersLockersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLockersLockersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/lockers/lockers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiLockersLockersIdDelete(requestParameters: ApiLockersLockersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiLockersLockersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLockersLockersIdGetRaw(requestParameters: ApiLockersLockersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLockersLockersIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/lockers/lockers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockerFromJSON(jsonValue));
    }

    /**
     */
    async apiLockersLockersIdGet(requestParameters: ApiLockersLockersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locker> {
        const response = await this.apiLockersLockersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLockersLockersIdPutRaw(requestParameters: ApiLockersLockersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locker>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLockersLockersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/lockers/lockers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LockerUpdateInputToJSON(requestParameters['lockerUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockerFromJSON(jsonValue));
    }

    /**
     */
    async apiLockersLockersIdPut(requestParameters: ApiLockersLockersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locker> {
        const response = await this.apiLockersLockersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLockersLockersPostRaw(requestParameters: ApiLockersLockersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locker>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/lockers/lockers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LockerInsertInputToJSON(requestParameters['lockerInsertInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockerFromJSON(jsonValue));
    }

    /**
     */
    async apiLockersLockersPost(requestParameters: ApiLockersLockersPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locker> {
        const response = await this.apiLockersLockersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
