/* tslint:disable */
/* eslint-disable */
/**
 * Smart Locker API
 * API quản lý tủ đồ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Branch,
  BranchInsertInput,
  BranchUpdateInput,
  BranchWithRelations,
  PaginatedBranch,
  PaginationQueryInput,
} from '../models/index';
import {
    BranchFromJSON,
    BranchToJSON,
    BranchInsertInputFromJSON,
    BranchInsertInputToJSON,
    BranchUpdateInputFromJSON,
    BranchUpdateInputToJSON,
    BranchWithRelationsFromJSON,
    BranchWithRelationsToJSON,
    PaginatedBranchFromJSON,
    PaginatedBranchToJSON,
    PaginationQueryInputFromJSON,
    PaginationQueryInputToJSON,
} from '../models/index';

export interface ApiBranchesIdDeleteRequest {
    id: string;
}

export interface ApiBranchesIdGetRequest {
    id: string;
}

export interface ApiBranchesIdPutRequest {
    id: string;
    branchUpdateInput?: BranchUpdateInput;
}

export interface ApiBranchesPostRequest {
    branchInsertInput?: BranchInsertInput;
}

export interface ApiBranchesSearchPostRequest {
    paginationQueryInput?: PaginationQueryInput;
}

/**
 * 
 */
export class BranchApi extends runtime.BaseAPI {

    /**
     */
    async apiBranchesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Branch>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BranchFromJSON));
    }

    /**
     */
    async apiBranchesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Branch>> {
        const response = await this.apiBranchesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBranchesIdDeleteRaw(requestParameters: ApiBranchesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBranchesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiBranchesIdDelete(requestParameters: ApiBranchesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.apiBranchesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBranchesIdGetRaw(requestParameters: ApiBranchesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BranchWithRelations>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBranchesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchWithRelationsFromJSON(jsonValue));
    }

    /**
     */
    async apiBranchesIdGet(requestParameters: ApiBranchesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BranchWithRelations> {
        const response = await this.apiBranchesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBranchesIdPutRaw(requestParameters: ApiBranchesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Branch>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBranchesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BranchUpdateInputToJSON(requestParameters['branchUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchFromJSON(jsonValue));
    }

    /**
     */
    async apiBranchesIdPut(requestParameters: ApiBranchesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Branch> {
        const response = await this.apiBranchesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBranchesPostRaw(requestParameters: ApiBranchesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Branch>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BranchInsertInputToJSON(requestParameters['branchInsertInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchFromJSON(jsonValue));
    }

    /**
     */
    async apiBranchesPost(requestParameters: ApiBranchesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Branch> {
        const response = await this.apiBranchesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBranchesSearchPostRaw(requestParameters: ApiBranchesSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedBranch>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/branches/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaginationQueryInputToJSON(requestParameters['paginationQueryInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedBranchFromJSON(jsonValue));
    }

    /**
     */
    async apiBranchesSearchPost(requestParameters: ApiBranchesSearchPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedBranch> {
        const response = await this.apiBranchesSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
